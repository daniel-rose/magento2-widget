<?xml version="1.0" encoding="UTF-8" ?>
<project name="DR_Widget" default="full-build" basedir=".">
    <property name="builddir" value="${project.basedir}/build" override="true"/>
    <property name="srcdir" value="${project.basedir}/src" override="true"/>
    <property name="testdir" value="${project.basedir}/src" override="true"/>
    <property name="vendordir" value="${project.basedir}/vendor" override="true"/>

    <property name="pdepend" value="${vendordir}/bin/pdepend"/>
    <property name="phpcpd" value="${vendordir}/bin/phpcpd"/>
    <property name="phpcs" value="${vendordir}/bin/phpcs"/>
    <property name="phploc" value="${vendordir}/bin/phploc"/>
    <property name="phpmd" value="${vendordir}/bin/phpmd"/>
    <property name="phpunit" value="${vendordir}/bin/phpunit"/>

    <target name="full-build"
            depends="prepare,static-analysis,phpunit,-check-failure"
            description="Performs static analysis, runs the tests, and generates project documentation"/>

    <target name="full-build-parallel"
            depends="prepare,static-analysis-parallel,phpunit,-check-failure"
            description="Performs static analysis (executing the tools in parallel), runs the tests, and generates project documentation"/>

    <target name="quick-build"
            depends="prepare,lint,phpunit-no-coverage"
            description="Performs a lint check and runs the tests (without generating code coverage reports)"/>

    <target name="static-analysis"
            depends="lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci"
            description="Performs static analysis"/>

    <target name="static-analysis-parallel"
            description="Performs static analysis (executing the tools in parallel)">
        <parallel threadCount="2">
            <sequential>
                <phingcall target="pdepend"/>
                <phingcall target="phpmd-ci"/>
            </sequential>
            <phingcall target="lint"/>
            <phingcall target="phpcpd-ci"/>
            <phingcall target="phpcs-ci"/>
            <phingcall target="phploc-ci"/>
        </parallel>
    </target>

    <target name="clean" unless="clean.done" description="Cleanup build artifacts">
        <delete dir="${builddir}/api"/>
        <delete dir="${builddir}/coverage"/>
        <delete dir="${builddir}/logs"/>
        <delete dir="${builddir}/pdepend"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare" unless="prepare.done" depends="clean" description="Prepare for build">
        <mkdir dir="${builddir}/api"/>
        <mkdir dir="${builddir}/coverage"/>
        <mkdir dir="${builddir}/logs"/>
        <mkdir dir="${builddir}/pdepend"/>
        <property name="prepare.done" value="true"/>
    </target>

    <target name="lint" unless="lint.done" description="Perform syntax check of sourcecode files">
        <apply executable="php" checkreturn="true">
            <arg value="-l"/>

            <fileset dir="${srcdir}">
                <include name="**/*.php"/>
            </fileset>

            <fileset dir="${testdir}">
                <include name="**/*.php"/>
            </fileset>
        </apply>

        <property name="lint.done" value="true"/>
    </target>

    <target name="phploc" unless="phploc.done"
            description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${phploc}">
            <arg value="--count-tests"/>
            <arg path="${srcdir}"/>
            <arg path="${testdir}"/>
        </exec>

        <property name="phploc.done" value="true"/>
    </target>

    <target name="phploc-ci" unless="phploc.done" depends="prepare"
            description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phploc}">
            <arg value="--count-tests"/>
            <arg value="--log-csv"/>
            <arg path="${builddir}/logs/phploc.csv"/>
            <arg value="--log-xml"/>
            <arg path="${builddir}/logs/phploc.xml"/>
            <arg path="${srcdir}"/>
            <arg path="${testdir}"/>
        </exec>

        <property name="phploc.done" value="true"/>
    </target>

    <target name="pdepend" unless="pdepend.done" depends="prepare"
            description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${pdepend}">
            <arg value="--jdepend-xml=${builddir}/logs/jdepend.xml"/>
            <arg value="--jdepend-chart=${builddir}/pdepend/dependencies.svg"/>
            <arg value="--overview-pyramid=${builddir}/pdepend/overview-pyramid.svg"/>
            <arg path="${srcdir}"/>
        </exec>

        <property name="pdepend.done" value="true"/>
    </target>

    <target name="phpmd" unless="phpmd.done"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpmd}">
            <arg path="${srcdir}"/>
            <arg value="text"/>
            <arg path="${builddir}/phpmd.xml"/>
        </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpmd-ci" unless="phpmd.done" depends="prepare"
            description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpmd}">
            <arg path="${srcdir}"/>
            <arg value="xml"/>
            <arg path="${builddir}/phpmd.xml"/>
            <arg value="--reportfile"/>
            <arg path="${builddir}/logs/pmd.xml"/>
        </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpcs" unless="phpcs.done"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcs}">
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg path="${srcdir}"/>
            <arg path="${testdir}"/>
        </exec>

        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcs-ci" unless="phpcs.done" depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcs}" output="/dev/null">
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${builddir}/logs/checkstyle.xml"/>
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${srcdir}"/>
            <arg path="${testdir}"/>
        </exec>

        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcpd" unless="phpcpd.done"
            description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcpd}">
            <arg path="${srcdir}"/>
        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>

    <target name="phpcpd-ci" unless="phpcpd.done" depends="prepare"
            description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcpd}">
            <arg value="--log-pmd"/>
            <arg path="${builddir}/logs/pmd-cpd.xml"/>
            <arg path="${srcdir}"/>
        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>

    <target name="phpunit" unless="phpunit.done" depends="prepare" description="Run unit tests with PHPUnit">
        <exec executable="${phpunit}" returnProperty="result.phpunit">
            <arg value="--configuration"/>
            <arg path="${project.basedir}/phpunit.xml.dist"/>
        </exec>

        <property name="phpunit.done" value="true"/>
    </target>

    <target name="phpunit-no-coverage" unless="phpunit.done" depends="prepare"
            description="Run unit tests with PHPUnit (without generating code coverage reports)">
        <exec executable="${phpunit}" checkreturn="true">
            <arg value="--configuration"/>
            <arg path="${project.basedir}/phpunit.xml.dist"/>
            <arg value="--no-coverage"/>
        </exec>

        <property name="phpunit.done" value="true"/>
    </target>

    <target name="-check-failure">
        <if>
            <isfailure code="${result.phpunit}"/>
            <then>
                <fail message="PHPUnit did not finish successfully"/>
            </then>
        </if>
    </target>
</project>